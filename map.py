from config import *
from button import *
from func import *


text_map1 = emojize('1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å\n2. –ö–æ—Ä–ø—É—Å ‚Ññ1\n3. –ö–æ—Ä–ø—É—Å ‚Ññ3\n4. –ö–æ—Ä–ø—É—Å ‚Ññ4\n5. –ö–æ—Ä–ø—É—Å ‚Ññ5\n6. –ö–æ—Ä–ø—É—Å ‚Ññ6'
                   '\n7. –ë–æ–ª—å—à–æ–π –∑–∞–ª "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∏–π"\n8. –°—Ç–æ–ª–æ–≤–∞—è\n9. –°–∞–º–º–∏—Ç-—Ö–æ–ª–ª\n10. –ü–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞'
                   '\n11. –ó–æ–Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–∏\n12. –¢–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–æ—Ä—Ç\n13. –§—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ\n14. –ë–µ—Å–µ–¥–∫–∞\n15. –ö–æ–Ω—é—à–Ω—è\n16. –ö–ü–ü')
text_map2 = emojize('1 —ç—Ç–∞–∂')
text_map3 = emojize('2 —ç—Ç–∞–∂')
text_map4 = emojize('3 —ç—Ç–∞–∂')

list_map = [['AgACAgIAAxkBAAIEl2LIrOwKdM6n8a0KCuL93a7VJhSbAAL7vzEbqUlISlQ9aFWGdtwlAQADAgADeQADKQQ', text_map1],
            ['AgACAgIAAxkBAAIEmGLIrSgpBe_sj97TftabGMZZNDVCAAL9vzEbqUlIShtTJEvnGznNAQADAgADeQADKQQ', text_map2],
            ['AgACAgIAAxkBAAIEmWLIrXLCzSjXClbM_74su2NKx3yaAAL-vzEbqUlISk3F8jmIv11CAQADAgADeQADKQQ', text_map3],
            ['AgACAgIAAxkBAAIEmmLIrZvwKsbAS714gK4lntj6U6TkAAL_vzEbqUlISuJ_hFI4Je8IAQADAgADeQADKQQ', text_map4]]
list_button = ['–°—Ö–µ–º–∞ –î–û–õ –Æ–Ω–æ—Å—Ç—å', emojize('–°–∞–º–º–∏—Ç-—Ö–æ–ª–ª :one:', language='alias'),
               emojize('–°–∞–º–º–∏—Ç-—Ö–æ–ª–ª :two:', language='alias'),
               emojize('–°–∞–º–º–∏—Ç-—Ö–æ–ª–ª :three:', language='alias')]


@dp.message_handler(text=emojize('–°—Ö–µ–º–∞ –∫–∞–º–ø—É—Å–∞ :world_map:'))
async def send_map(msg: types.Message):
    await send_message_try(msg.from_user.id, 'üõ† –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ö–µ–º–∞ —Ñ–æ—Ä—É–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', kb_start)


# @dp.message_handler(text=emojize('–°—Ö–µ–º–∞ –∫–∞–º–ø—É—Å–∞ :world_map:'))
# async def send_map(msg: types.Message, page=0):
#     kb_map = InlineKeyboardMarkup(row_width=2)
#     for i in range(4):
#         if i == page:
#             kb_map.insert(InlineKeyboardButton(f'- {list_button[i]} -', callback_data='no'))
#         else:
#             kb_map.insert(InlineKeyboardButton(list_button[i], callback_data=cb_map.new(page=i)))
#     await bot.send_photo(msg.from_user.id, list_map[page][0], caption=list_map[page][1], reply_markup=kb_map)
#

@dp.callback_query_handler(cb_map.filter())
async def page_map(call: types.CallbackQuery, callback_data: dict):
    page = int(callback_data['page'])
    kb_map = InlineKeyboardMarkup(row_width=2)
    for i in range(4):
        if i == page:
            kb_map.insert(InlineKeyboardButton(f'- {list_button[i]} -', callback_data='no'))
        else:
            kb_map.insert(InlineKeyboardButton(list_button[i], callback_data=cb_map.new(page=i)))
    await call.message.edit_media(InputMedia(type="photo", media=list_map[page][0], caption=list_map[page][1]), reply_markup=kb_map)
    await call.answer()


@dp.callback_query_handler(text='no')
async def no(call: types.CallbackQuery):
    await call.answer()

